# complete -o filenames -F _root_command notify

alias gnb='_gnb'
function _gnb () {
   default_branch=''
    if [ -z "$1" ]; then
        echo "Usage: gnb branchName"
        return
    else
        echo
    if [[ $1 == *_* ]]; then
        echo "Usage: defaultBranch name should not include _"
        return
      else
        default_branch=$1
      fi
    fi

   now_pwd=`pwd`
   while [[ ! -d ".git" ]]; do
    cd ..
    if [[ `pwd` = '/' ]]; then
        echo 'Here is Root, Damn! Let us go back, biu~~'
        cd ${now_pwd}
        return
    fi
    done

    head=`cat .git/HEAD`
    user=`git config --get user.name`
    user_branch="${user}_$default_branch"

    git fetch origin
    git fetch --tags

    if [ -f ".git/refs/remotes/origin/$default_branch" ]; then
        echo "Remote has ${default_branch}"
        # 远程有服务器分支
        git checkout $default_branch
        git branch --set-upstream-to=origin/$default_branch
        git merge origin/${default_branch}
        git push origin ${default_branch}
    else
        echo "Remote don't have ${default_branch}"
        # 服务器没有这个分支
        git checkout -b $default_branch
        git push origin ${default_branch}
        git branch --set-upstream-to=origin/$default_branch
    fi


    if [ -f ".git/refs/remotes/origin/$user_branch" ]; then
        echo "Remote has ${user_branch}"
        # 远程有服务器分支
        git checkout $user_branch
        git branch --set-upstream-to=origin/$user_branch
        git merge origin/${user_branch}
        git push origin ${user_branch}
    else
        echo "Remote don't have ${user_branch}"
        # 服务器没有这个分支
        git checkout -b $user_branch
        git push origin ${user_branch}
        git branch --set-upstream-to=origin/$user_branch
    fi
    gl
}

#alias gl='_gl'
function _gl() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;

    head=`cat .git/HEAD`
    current_head=${head##*/}
    user=${current_head%%_*}
    if [[ $current_head == *_* ]]
        then
        branch=${current_head%%+*}
        branch=${branch##*_}
        user_branch="${user}_${branch}"

        git fetch origin
        git merge $user_branch origin/$user_branch
        git merge $user_branch origin/$branch

        if [[ $current_head == *+* ]]; then
            git merge $current_head origin/${user_branch}
            git merge $current_head origin/$current_head
            git merge $current_head $user_branch
        fi
    else
        echo "you are not in your own branch"
    fi
}

alias glm='_glm'
function _glm() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;

    head=`cat .git/HEAD`
    current_head=${head##*/}
    user=${current_head%%_*}
    if [[ $current_head == *_* ]]
        then
        branch=${current_head%%+*}
        branch=${branch##*_}
        user_branch="${user}_${branch}"

        git fetch origin
        git merge $user_branch origin/$user_branch
        git merge $user_branch origin/$branch

        if [[ $current_head == *+* ]]; then
            git merge $current_head origin/${user_branch}
            git merge $current_head origin/$current_head
            git merge $current_head $user_branch
        fi
    else
        echo "you are not in your own branch"
    fi
}

alias gh2='_gh'
function _gh() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]];do
        cd ..
        if [[ `pwd` == '/' ]]; then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done;

    head=`cat .git/HEAD`
    current_head=${head##*/}
    user=${current_head%%_*}
    if [[ $current_head == *_* ]]; then
        branch=${current_head%%+*}
        branch=${branch##*_}
        user_branch="${user}_${branch}"


        git fetch origin

        git merge $user_branch origin/$user_branch
        git merge $user_branch origin/$branch


        if [[ $current_head == *+* ]]; then
            git push origin $user_branch
            git fetch origin

            git checkout $current_head
            git merge origin/${user_branch}
            git merge $current_head origin/$current_head
            git push origin $current_head
        else
            git push origin $user_branch
        fi
    else
      echo "you are not in your own branch"
  fi
}

alias gmr='_gmr'
function _gmr() {
    now_pwd=`pwd`
    while [[ ! -d ".git" ]]
    do
        cd ..
        if [[ `pwd` = '/' ]]
        then
            echo 'Here is Root, Damn! Let us go back, biu~~'
            cd ${now_pwd}
            return
        fi
    done

    # setup_git_pre_commit_hooks
    src_branch=""
    dst_branch=""
    if [ -n "$1" ]; then
       head=`cat .git/HEAD`
       current_head=`echo $head | cut -b 17-`
       git fetch origin
       git push origin $current_head
       src_branch=${current_head}
       dst_branch=$1
    else
        head=`cat .git/HEAD`
        current_head=`echo $head | cut -b 17-`
        user=${current_head%%_*}
        if [[ $current_head = *_* ]]
        then
            branch=${current_head%%+*}
            branch=${branch##*_}
            user_branch="${user}_${branch}"
            git fetch origin
            git merge $user_branch origin/$user_branch
            git merge $user_branch origin/$branch
            if [[ $current_head = *+* ]]
            then
                git push origin $user_branch
                git fetch origin
                git checkout $current_head
                git merge origin/${user_branch}
                git merge $current_head origin/$current_head
                git push origin $current_head
            else
                git push origin $user_branch
            fi
            src_branch=${user_branch}
            dst_branch=${branch}
        else
            echo "you are not in your own branch"
            return
        fi
    fi

    origin_url=`git config remote.origin.url`
    git_ip=""
    git_path=""
    url=""

    git_ip=`git config remote.origin.url | awk -F':' '{print $1}'| awk -F'@' '{print $2}'`
    git_path=`git config remote.origin.url | awk -F':' '{print $2}' | awk -F'.' '{print $1}'`
    url='https://'$git_ip'/'$git_path'/-/merge_requests/new?utf8=✓&merge_request[source_branch]='$src_branch'&merge_request[target_branch]='$dst_branch

    if [[ -x "$(command -v xdg-open)" ]]
    then
        echo "xdg-open"
        xdg-open $url
        return 0
    fi

    if [[ -x "$(command -v open)" ]]
    then
        echo "open"
        open $url
        return 0
    fi

    if [[ -x "$(command -v start)" ]]
    then
        echo "start"
        start $url
        return 0
    fi

}

# private function
function rev2() {
    declare input=${*:-$(</dev/stdin)}
    reverse=""

    len=${#input}
    for (( i=$len-1; i>=0; i-- ))
    do
        reverse="$reverse${input:$i:1}"
    done
    echo ${reverse}
    # return $reverse
}

function setup_git_pre_commit_hooks() {
    mkdir -p .git/hooks
    if [[ ! -f .git/hooks/pre-commit && -f scripts/pre-commit/pre-commit.sh ]]; then
        echo "Copy Pre-Commit to hooks"
    fi

    if [[ -f scripts/pre-commit/pre-commit.sh ]]; then
        cp -f scripts/pre-commit/pre-commit.sh .git/hooks/pre-commit
        chmod +x .git/hooks/pre-commit
    fi
}
