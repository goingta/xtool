# loop until a non-empty value is read
loop_read() {
  local _result=$1
  local _prompt=$2
  read -p "$_prompt" $_result
  if [[ -z "${!_result}" ]] ; then
    loop_read "$@"
  fi
}

# prompt for type...
loop_read GITX_TYPE_IDX "type (0:feat, 1:fix, 2:style, 3:refactor, 4:perf, 5: test, 6:revert, 7:docs, 8:build, 9:ci, 10:chore): "
case "$GITX_TYPE_IDX" in 
  0) GITX_TYPE="feat" ;;
  1) GITX_TYPE="fix" ;;
  2) GITX_TYPE="style" ;;
  3) GITX_TYPE="refactor" ;;
  4) GITX_TYPE="perf" ;;
  5) GITX_TYPE="test" ;;
  6) GITX_TYPE="revert" ;;
  7) GITX_TYPE="docs" ;;
  8) GITX_TYPE="build" ;;
  9) GITX_TYPE="ci" ;;
  10) GITX_TYPE="chore" ;;
  *) echo "Error: invalid type"
     exit 1
     ;;
esac

# prompt for scope(skipable)...
read -p "scope (press ENTER to skip): " GITX_SCOPE
if [[ -n "$GITX_SCOPE" ]] ; then
  GITX_SCOPE="($GITX_SCOPE)"
fi

# prompt for short description...
loop_read GITX_SHORT_DESCRIPTION "short description: "

# prompt for long description(skipable)...
read -p "long description (press ENTER to skip): " GITX_LONG_DESCRIPTION

# compose full commit message ($GITX_MESSAGE) in the following format:
# <type>(<scope>): <short description>
# <BLANK LINE>
# <long descrption>
GITX_MESSAGE="${GITX_TYPE}${GITX_SCOPE}: $GITX_SHORT_DESCRIPTION"
if [[ -n "$GITX_LONG_DESCRIPTION" ]] ; then
  GITX_MESSAGE="$GITX_MESSAGE
$GITX_LONG_DESCRIPTION"
fi

# append the full commit message (-m $GITX_MESSAGE) to the original command
git add . && git commit -m "$GITX_MESSAGE"
